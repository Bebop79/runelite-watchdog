plugins {
	id 'java'
}

repositories {
	mavenLocal()
	maven {
		url = 'https://repo.runelite.net'
	}
	mavenCentral()
}

def runeLiteVersion = 'latest.release'

dependencies {
	implementation files('lib/jaco-mp3-player-0.9.5.jar')
	compileOnly group: 'net.runelite', name:'client', version: runeLiteVersion

	compileOnly 'org.projectlombok:lombok:1.18.20'
	annotationProcessor 'org.projectlombok:lombok:1.18.20'

	testImplementation 'junit:junit:4.12'
	testImplementation group: 'net.runelite', name:'client', version: runeLiteVersion
	testImplementation group: 'net.runelite', name:'jshell', version: runeLiteVersion
}

group = 'com.adamk33n3r.runelite.watchdog'

def versionProps = new Properties()
def versionPropsFile = file("src/main/resources/${group.replace('.', '/')}/version.properties")
if (versionPropsFile.exists())
	versionProps.load(versionPropsFile.newReader())

def updateBuildNumber = 1
if (tasks.findByName('shadowJar')) {
	updateBuildNumber = 0
}

def major = (versionProps['VERSION_MAJOR'] as String ?: '0').toInteger()
def minor = (versionProps['VERSION_MINOR'] as String ?: '0').toInteger()
def patch = (versionProps['VERSION_PATCH'] as String ?: '0').toInteger()
def build = (versionProps['VERSION_BUILD'] as String ?: '0').toInteger() + updateBuildNumber
def phase = (versionProps['VERSION_PHASE'] as String ?: '')
versionProps['VERSION_MAJOR'] = major.toString()
versionProps['VERSION_MINOR'] = minor.toString()
versionProps['VERSION_PATCH'] = patch.toString()
versionProps['VERSION_BUILD'] = build.toString()
versionProps['VERSION_PHASE'] = phase
versionProps.store(versionPropsFile.newWriter(), null)

version = major+'.'+minor+'.'+patch
if (!phase.empty)
	version = version+'-'+phase
version = version+'+'+build
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

tasks.register("shadowJar", Jar) {
	dependsOn configurations.testRuntimeClasspath
	manifest {
		attributes 'Main-Class': 'com.adamk33n3r.runelite.watchdog.WatchdogPluginLauncher'
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from sourceSets.main.output
	from sourceSets.test.output
	from({
		configurations.testRuntimeClasspath.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	})
	exclude("META-INF/INDEX.LIST")
	exclude("META-INF/*.SF")
	exclude("META-INF/*.DSA")
	exclude("META-INF/*.RSA")
	exclude "**/module-info.class"

	group = BasePlugin.BUILD_GROUP
	archiveClassifier = "shadow"
	archiveFileName = rootProject.name + "-" + project.version + "-all.jar"
}
